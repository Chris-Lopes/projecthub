// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleType {
  VIEWER
  STUDENT
  FACULTY
  COLLEGE
  ANON
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  PROJECT_APPROVED
  PROJECT_REJECTED
  NEW_COMMENT
}

enum SDGGoal {
  NO_POVERTY
  ZERO_HUNGER
  GOOD_HEALTH
  QUALITY_EDUCATION
  GENDER_EQUALITY
  CLEAN_WATER
  AFFORDABLE_ENERGY
  DECENT_WORK
  INDUSTRY_INNOVATION
  REDUCED_INEQUALITIES
  SUSTAINABLE_CITIES
  RESPONSIBLE_CONSUMPTION
  CLIMATE_ACTION
  LIFE_BELOW_WATER
  LIFE_ON_LAND
  PEACE_JUSTICE
  PARTNERSHIPS
}

model UserDB {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  roleType            RoleType
  viewer              Viewer?
  student             Student?
  faculty             Faculty?
  college             College?
  projects            Project[]
  comments            Comment[]
  projectLikes        ProjectLike[]
  notifications       Notification[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ProjectCollaborator ProjectCollaborator[]
  sentChats           Chat[]                @relation("SenderChats")
  receivedChats       Chat[]                @relation("ReceiverChats")
  messages            Message[]
}

model Viewer {
  id        String   @id @default(uuid())
  user      UserDB   @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                String     @id @default(uuid())
  user              UserDB     @relation(fields: [userId], references: [id])
  userId            String     @unique
  roll_no           String     @unique
  class             String
  academic_year     String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  feedbacksReceived Feedback[]
}

model Faculty {
  id             String     @id @default(uuid())
  user           UserDB     @relation(fields: [userId], references: [id])
  userId         String     @unique
  employee_no    String     @unique
  designation    String
  department     String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  feedbacksGiven Feedback[]
}

model College {
  id        String   @id @default(uuid())
  user      UserDB   @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id            String                @id @default(uuid())
  name          String
  description   String
  thumbnail_url String
  website_url   String?
  github_url    String
  views         Int                   @default(0)
  likes         Int                   @default(0)
  status        ProjectStatus         @default(PENDING)
  sdgGoals      SDGGoal[]             @default([])
  user          UserDB                @relation(fields: [userId], references: [id])
  userId        String
  comments      Comment[]
  projectLikes  ProjectLike[]
  collaborators ProjectCollaborator[]
  notifications Notification[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model ProjectLike {
  id        String   @id @default(uuid())
  user      UserDB   @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())

  @@unique([userId, projectId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      UserDB   @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectCollaborator {
  id        String   @id @default(uuid())
  user      UserDB   @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())

  @@unique([userId, projectId])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  user      UserDB           @relation(fields: [userId], references: [id])
  userId    String
  project   Project?         @relation(fields: [projectId], references: [id])
  projectId String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Chat {
  id         String    @id @default(uuid())
  sender     UserDB    @relation("SenderChats", fields: [senderId], references: [id])
  senderId   String
  receiver   UserDB    @relation("ReceiverChats", fields: [receiverId], references: [id])
  receiverId String
  messages   Message[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([senderId, receiverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    UserDB   @relation(fields: [senderId], references: [id])
  senderId  String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Feedback {
  id        String   @id @default(uuid())
  title     String
  status    String   @default("PENDING") // PENDING, COMPLETED
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  facultyId String
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
